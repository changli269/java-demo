name: java-demo-ci

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Build with Maven (tests + JaCoCo)
        shell: bash
        run: mvn -B -ntp clean verify

      - name: Generate text-summary.txt from JaCoCo
        shell: bash
        run: |
          python3 - << 'PY'
          import xml.etree.ElementTree as ET
          import os, sys
          xml_path = os.path.join('target','site','jacoco','jacoco.xml')
          out_dir = os.path.join('target','site','jacoco')
          out_path = os.path.join(out_dir,'text-summary.txt')
          if not os.path.exists(xml_path):
            print(f"JaCoCo XML not found at {xml_path}", file=sys.stderr)
            sys.exit(1)
          os.makedirs(out_dir, exist_ok=True)
          tree = ET.parse(xml_path)
          root = tree.getroot()
          totals = {}
          # Aggregate top-level counters
          for c in root.findall('counter'):
            t = c.get('type')
            missed = int(c.get('missed'))
            covered = int(c.get('covered'))
            totals[t] = (missed, covered)

          def pct(covered, missed):
            total = covered + missed
            return 0.0 if total == 0 else 100.0 * covered / total

          def fmt(label, miss_cov):
            missed, covered = miss_cov
            total = missed + covered
            percent = pct(covered, missed)
            return f"{label:<12}: {percent:.2f}% ( {covered}/{total} )"

          # Map to Jest-like categories expected by pr-coverage-tracker
          stmt_cov = totals.get('INSTRUCTION', (0, 0))  # "Statements"
          branch_cov = totals.get('BRANCH', (0, 0))     # "Branches"
          func_cov = totals.get('METHOD', (0, 0))       # "Functions"
          line_cov = totals.get('LINE', (0, 0))         # "Lines"

          lines = []
          lines.append('='*31 + ' Coverage summary ' + '='*31)
          lines.append(fmt('Statements', stmt_cov))
          lines.append(fmt('Branches', branch_cov))
          lines.append(fmt('Functions', func_cov))
          lines.append(fmt('Lines', line_cov))
          lines.append('='*78)

          with open(out_path, 'w') as f:
            f.write('\n'.join(lines))

          print(f"Wrote {out_path}")

          # print contents to console as well
          with open(out_path, 'r') as f:
            print(f.read())
          PY

      # - name: Ensure baseline file exists
      #   run: |
      #     if [ ! -f "__prev-text-summary.txt" ]; then
      #       echo "No previous baseline; creating empty __prev-text-summary.txt"
      #       echo "" > __prev-text-summary.txt
      #     fi

      - name: PR coverage tracker
        id: coverage
        uses: changli269/pr-coverage-tracker@ab96eaa88d72d1d138f272def31c98167691565a
        with:
          token: ${{ secrets.GH_TOKEN }}
          coverage-path: target/site/jacoco/text-summary.txt

      - name: Write comment
        # Do it only if there were changes in coverage
        if: github.event_name == 'pull_request' && (steps.coverage.outputs.compared == 'true') && (steps.coverage.outputs.has-changed == 'true')
        uses: peter-evans/create-or-update-comment@v3.0.1
        with:
          issue-number: ${{ github.event.number }}
          body-path: ${{ steps.coverage.outputs.comment-file }}
